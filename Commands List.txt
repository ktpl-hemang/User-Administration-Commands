1) Creating a user account using useradd command on Ubuntu

# sudo useradd -s /bin/bash -d /home/ktpl -m ktpl

-s /bin/bash – Set /bin/bash as login shell of the new account
-d /home/ktpl/ – Set /home/ktpl/ as home directory of the new Ubuntu account
-m – Create the user’s home directory

2) Set a Password for newly added User

# passwd ktpl

3) Set Up vsftpd for a User's Directory on Ubuntu

Step 1 — Installing vsftpd

# sudo apt-get update
# sudo apt-get install vsftpd

Step 2 — Backup vsftpd..conf and delete it

# sudo cp /etc/vsftpd.conf /etc/vsftpd.conf.bak
# sudo rm -rf /etc/vsftpd.conf

Step 3 — Create New file vsftpd.conf with root user and group and add the below configuration:

listen=NO
listen_ipv6=YES
anonymous_enable=NO
local_enable=YES
write_enable=YES
local_umask=002
dirmessage_enable=YES
use_localtime=YES
xferlog_enable=YES
connect_from_port_20=YES
chroot_local_user=YES
user_sub_token=$USER
pam_service_name=vftpd
#local_root=/path/to/directory
#pasv_min_port=40000
#pasv_max_port=50000
userlist_enable=YES
userlist_file=/etc/vsftpd.userlist
userlist_deny=NO
allow_writeable_chroot=YES
rsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem
rsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key
ssl_enable=NO

Note: After adding lines, save and close the file.

Step 4 — Preparing the User Directory

# useradd -g existinggroup -d /path/to/directory -s /sbin/nologin ftpuser

# passwd ftpuser

# chown -R ftpuser:existinggroup /path/to/directory

# chmod- R 755 ftpuser:existinggroup /path/to/directory 

Step 5 — Add our ftpuser to the vsftpd userlist file

# echo "ftpusername" | sudo tee -a /etc/vsftpd.userlist

Step 6 — Vsftpd  service restart

# service vsftpd restart

4) File and Directory Permissions

* Ownership of Linux files *

Every file and directory on your Unix/Linux system is assigned 3 types of owner, given below.

* User

A user is the owner of the file. By default, the person who created a file becomes its owner. Hence, a user is also sometimes called an owner.

* Group

A user- group can contain multiple users. All users belonging to a group will have the same access permissions to the file. Suppose you have a project where a number of people require access to a file. Instead of manually assigning permissions to each user, you could add all users to a group, and assign group permission to file such that only this group members and no one else can read or modify the files.

* Other

Any other user who has access to a file. This person has neither created the file, nor he belongs to a usergroup who could own the file. Practically, it means everybody else. Hence, when you set the permission for others, it is also referred as set permissions for the world.

Let us understand the Permission system on Linux.

* Permissions

Every file and directory in your UNIX/Linux system has following 3 permissions defined for all the 3 owners discussed above.

	- Read: This permission give you the authority to open and read a file. Read permission on a directory gives you		the ability to lists its content.

	- Write: The write permission gives you the authority to modify the contents of a file. The write permission on a 			 directory gives you the authority to add, remove and rename files stored in the directory. Consider a 				 scenario where you have to write permission on file but do not have write permission on the directory 				 where the file is stored. You will be able to modify the file contents. But you will not be able to 				 rename, move or remove the file from the directory.

	- Execute: In Windows, an executable program usually has an extension ".exe" and which you can easily run. In Unix/			   Linux, you cannot run a program unless the execute permission is set. If the execute permission is not 			   set, you might still be able to see/modify the program code(provided read & write permissions are set), 			   but not run it.
* ls -l command on terminal gives File type and Access Permissions

ravi@ravic-pc ~/Desktop $ ls -l file.txt
-rw-rw-r-- 1 ravi ravi 0 Nov 29 16:49 file.txt

Here, the first '-' implies that we have selected a file. Else, if it were a directory, d would have been shown like below.

ravi@ravic-pc ~ $ ls -ld Desktop/
drwxr-xr-x 14 ravi ravi 4096 Nov 29 16:49 Desktop/

The characters are pretty easy to remember.
	
	r = read permission (4)
	w = write permission (2)
	x = execute permission (1)
	- = no permission (0)

* Changing file/directory permissions with 'chmod' command

We can use the 'chmod' command which stands for 'change mode'. Using the command, we can set permissions (read, write, execute) on a file/directory for the owner, group and the world.

Syntax: chmod permissions filename/directoryname

There are 2 ways to use the command

	1) Absolute(Numeric) Mode
	2) Symbolic mode

Number	Permission Type		  Symbol
0		No Permission			---
1		Execute					--x
2	  	Write					-w-
3		Execute + Write			-wx
4		Read					r--
5		Read + Execute			r-x
6		Read + Write			rw-
7		Read + Write + Execute	rwx


